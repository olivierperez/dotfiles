[includeIf "gitdir:/data/projects/seb/"]
	path = .gitconfig-seb
[includeIf "gitdir:/data/projects/perso/"]
	path = .gitconfig-perso
[includeIf "gitdir:/data/projects/zenika/"]
	path = .gitconfig-zenika
[includeIf "gitdir:/data/projects/bedrock/"]
	path = .gitconfig-bedrock


[credential]
	helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret

[core]
        editor = vim
        autocrlf = input

[branch]
	autosetuprebase = always
	
[pull]
	rebase = merges

[rebase]
        autoSquash = true
        autoStash = true

[rerere]
	enabled = true

[color]
        ui = true

[color "diff"]
        old = red
        new = green
        frag = magenta dim

[push]
	default = current

[alias]
	ap = add -p
	amend = commit --amend --no-edit
	amendedit = commit --amend
	br = branch
	changes = diff --name-status -w
	chpi = cherry-pick
	chpix = cherry-pick -x
	cm = commit
	co-commit = "!co_authored_commit(){ usage='usage: git commit -m \"Commit message\" --co \"co_author_name\"\n'; while [ \"${#}\" -gt 0 ]; do case \"${1}\" in -m) shift; message="${1}"; shift;; --co) shift; co_author=\"Co-authored-by: \"${1}\"\n\"; co_authors=\"${co_authors}${co_author}\"; shift;; *) shift;; esac; done; if [ -z \"${co_authors}\" ]; then echo ${usage}; exit 1; fi; if [ -z \"${message}\" ]; then echo ${usage}; exit 1; fi; co_authored_message=\"${message}\n\n\n${co_authors}\"; git commit -m \"${co_authored_message}\"; }; co_authored_commit"
	co = checkout
	get = "!gitget(){ git checkout $1; git pull; }; gitget"
	diw = diff --word-diff -w
	dic = diff --cached -w
	dis = diff --stat -w
	fixup = commit --fixup
	it = "!git init && git commit -m 'Initial commit' --allow-empty"
	merge = merge --no-ff
	mergeff = merge --ff
	please = push --force-with-lease
	pushtag= push --no-verify
	shorty = status --short --branch
	st = status -u
	undo = reset --soft HEAD^
	who = shortlog -sne

	lasttag = !git describe --tags $(git rev-list --tags --max-count=1)
#	prune = !git br --merged master | egrep -v ".*(dev|master|release).*" | xargs git branch -d

	pop = stash pop
	tkt = rebase --continue

	track = !git branch -vv | grep "^*" | sed -re 's/^\\* ([^ ]+) .*\\[(.+)].*$/\\1 -> \\2/'
	aliases = config --get-regexp ^alias.

	rlog = log -g --oneline --date=format:'%y%m%d %H:%M:%S'

	grog = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n          %C(yellow)%s%C(reset)'

	l = log --pretty=oneline --abbrev-commit --graph --color=always
	lg = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --color=always --abbrev-commit --date=iso
	lgb = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(yellow)%d%Creset %Creset' --color=always --abbrev-commit --date=iso
	lgs = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --color=always --abbrev-commit --date=iso --stat
	lgp = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --color=always --abbrev-commit --date=iso -p
	lgsp = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --color=always --abbrev-commit --date=iso --stat -p

	la = !git l --all
	lga = !git lg --all
	lgba = !git lgb --all
	lgsa = !git lgs --all
	lgpa = !git lgp --all
	lgspa = !git lgsp --all

	lh = !git l | head -n 25
	lgh = !git lg | head -n 25
	lgsh = !git lgs | head -n 25
	lgph = !git lgp | head -n 25
	lgsph = !git lgsp | head -n 25

	ignoreSSL = config --local http.sslVerify false
	autofixup = "!f() { git commit --fixup=\"$1\"; git rebase -i --autosquash \"$1\"~1;}; f"

	sublast="submodule foreach \"(git log -1 --oneline | head -n1 && echo '') || :\""
	suri="submodule update --recursive --init"

	wip = !git add . && git commit -m WIP
	unwip = "!f() { if [ \"$(git log -1 --pretty=%B | head -n1)\" = \"WIP\" ]; then git reset HEAD~1; echo \"Unwipped\"; else echo \"Last commit wasn't a WIP\"; fi;}; f"

	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	unhide-all = update-index --really-refresh
	hidden = ! git ls-files -v | grep '^[a-z]' | cut -c3-
	conflicts = diff --name-only --diff-filter=U

	prunef = "! git fetch -p && for branch in $(git branch -vv | grep ': gone]' | awk '{print $1}'); do git branch -D $branch; done"
[merge]
	tool = meld
[mergetool "meld"]
	cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
